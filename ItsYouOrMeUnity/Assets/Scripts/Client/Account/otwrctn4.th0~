using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Firebase.Auth;
using Firebase;
using Firebase.Firestore;
using System;

public class AutManager : MonoBehaviour
{
    public static AutManager aut;
   
    [Header("Firebase")]
    public DependencyStatus dependencyStatus;
    public FirebaseAuth auth;
    public FirebaseUser user;
    public FirebaseFirestore db;

    [Header("Login")]
    [SerializeField] InputField loginName;
    [SerializeField] InputField loginPassord;
    [SerializeField] UserDataPlayer myplayer;

    [Header("Register")]
    [SerializeField] InputField registerName;
    [SerializeField] InputField registerPassword1, registerPassword2, registerEmail;
    [SerializeField] ClientLobby lobby;
   
    [Header("Setup")]
    bool[] _skins = new bool[20];
   
    #region Setup

    private void Awake()
    {
        if (AutManager.aut == null)
        {
            AutManager.aut = this;
        }
        else
        {
            if (AutManager.aut != this)
            {
                Destroy(this.gameObject);
            }
        }
        DontDestroyOnLoad(this.gameObject);

        FirebaseApp.CheckAndFixDependenciesAsync().ContinueWith(task =>
        {
            dependencyStatus = task.Result;
            if (dependencyStatus == DependencyStatus.Available)
            {
                InitializeFirebase();
            }
            else
            {
                Debug.LogError("noppsi to firebase " + dependencyStatus);
            }
        });
    }
    private void InitializeFirebase()
    {
        auth = FirebaseAuth.DefaultInstance;
        db = FirebaseFirestore.DefaultInstance;
        print("connected");
        //lobby.ConnectedToFirebase();
    }
    #endregion

    #region Login
    public void LoginPressed()
    {
        auth.SignInWithEmailAndPasswordAsync(loginName.text, loginPassord.text).ContinueWith(task => {
            if (task.IsCanceled)
            {
                Debug.LogError("SignInWithEmailAndPasswordAsync was canceled.");
                return;
            }
            if (task.IsFaulted)
            {
                Debug.LogError("SignInWithEmailAndPasswordAsync encountered an error: " + task.Exception);
                return;
            }

            user = task.Result;
            Debug.LogFormat("User signed in successfully: {0} ({1})",
                user.DisplayName, user.UserId);
            GetUserData();
        });
    }
    void GetUserData()
    {
        print("Get data");
        DocumentReference reff = db.Collection(user.UserId).Document("player");
        reff.GetSnapshotAsync().ContinueWith((task) =>
        {
            var snapshot = task.Result;
            if (snapshot.Exists)
            {
                Debug.Log(String.Format("Document data for {0} document:", snapshot.Id));
                UserDataPlayer player = snapshot.ConvertTo<UserDataPlayer>();
                myplayer = player;
                print(myplayer.coins);
                //Debug.Log(String.Format("regDate: {0}", player.regDate));
                //Debug.Log(String.Format("coins: {0}", player.coins));
                //Debug.Log(String.Format("gold: {0}", player.gold));
                //Debug.Log(String.Format("packs: {0}", player.packs));
                //Debug.Log(String.Format("level: {0}", player.level));
                //Debug.Log(String.Format("wins: {0}", player.wins));
            }
            else
            {
                Debug.Log(String.Format("Document {0} does not exist!", snapshot.Id));
            }
        });
    }
    public void AnonymSigninPressed()
    {
        lobby.ChangeUi(4);
        auth.SignInAnonymouslyAsync().ContinueWith(task =>
        {
            if (task.IsCanceled)
            {
                Debug.LogError("SignInAnonymouslyAsync was canceled.");
                return;
            }
            if (task.IsFaulted)
            {
                Debug.LogError("SignInAnonymouslyAsync encountered an error: " + task.Exception);
                return;
            }

            user = task.Result;
            Debug.LogFormat("User signed in successfully: {0} ({1})",
                user.DisplayName, user.UserId);
            lobby.ChangeUi(3);
        });
    }
    #endregion

    #region Register
    public void RegisterPressed()
    {
        if (registerPassword1.text != registerPassword2.text)
        {
            print("Missmatch passwords");
            return;
        }

        auth.CreateUserWithEmailAndPasswordAsync(registerEmail.text, registerPassword1.text).ContinueWith(task =>
        {
            if (task.IsCanceled)
            {
                Debug.LogError("CreateUserWithEmailAndPasswordAsync was canceled.");
                return;
            }
            if (task.IsFaulted)
            {
                Debug.LogError("CreateUserWithEmailAndPasswordAsync encountered an error: " + task.Exception);
                return;
            }

            user = task.Result;
            Debug.LogFormat("Firebase user created successfully: {0} ({1})",
                user.DisplayName, user.UserId);
            SetupData();
        });
    }

    public void SetupData()
    {
        CollectionReference reff = db.Collection(user.UserId);
        UserDataPlayer p = new UserDataPlayer
        {
            regDate = WorldTimer.sharedInstance.GetCurrentDateNow(),
            coins = 100,
            gold = 0,
            packs = 1,
            level = 1,
            wins = 0
        };
        reff.Document("player").SetAsync(p).ContinueWith(task =>
        {
            UserDataSkins skin = new UserDataSkins
            {
                skins = _skins
            };
            reff.Document("skins").SetAsync(skin).ContinueWith(task =>
            {
                UserDataBuldings build = new UserDataBuldings
                {
                    house = 1,
                    garage = 1,
                    casino = 0,
                    farm = 0,
                    store = 0
                };
                reff.Document("buildings").SetAsync(build);
            });
        });
    }

    void DoneUpload()
    {
        print("Done");
        lobby.ChangeUi(3);
    }

    #endregion

    #region Data

    public void ReuploadData()
    {
        //UserData data = ClientSaveGame.csg.myData;
        //string json = JsonUtility.ToJson(data);
        //print(json);
        //reference.Child("Users").Child(user.UserId).SetRawJsonValueAsync(json).ContinueWith(task =>
        //{
        //    if (task.IsCompleted)
        //    {
        //        ClientSaveGame.csg.myData = data;
        //        DoneUpload();
        //    }
        //    else
        //    {
        //        print("Fail");
        //    }
        //});
    }
    #endregion
}

